{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as Parser from './parser.js';\r\nvar Urd = /** @class */ (function () {\r\n    function Urd() {\r\n    }\r\n    Urd.parse = function (input) {\r\n        var result = Parser.parse(input);\r\n        var object = {};\r\n        var fill = function (obj, set) {\r\n            set = set.filter(function (i) { return !!i; });\r\n            obj.$text = [];\r\n            for (var _i = 0, set_1 = set; _i < set_1.length; _i++) {\r\n                var data = set_1[_i];\r\n                if (data.type === 'prop') {\r\n                    obj[data.prop] = data.value;\r\n                }\r\n                else if (data.type === 'tag') {\r\n                    if (typeof data.tag === 'object') {\r\n                        obj[data.tag.name] = {\r\n                            $tag: data.tag.arg\r\n                        };\r\n                        fill(obj[data.tag.name], data.content || []);\r\n                    }\r\n                    else {\r\n                        obj[data.tag] = {};\r\n                        fill(obj[data.tag], data.content || []);\r\n                    }\r\n                }\r\n                else if (typeof data === 'string') {\r\n                    obj.$text.push(data);\r\n                }\r\n            }\r\n            obj.$text = obj.$text.join('\\n');\r\n        };\r\n        fill(object, result);\r\n        return object;\r\n    };\r\n    Urd.makePatterns = function (model) {\r\n        var modelPatterns = [];\r\n        var makePattern = function (data, iniPath) {\r\n            if (data === void 0) { data = model; }\r\n            if (iniPath === void 0) { iniPath = '__root__'; }\r\n            var path = iniPath;\r\n            for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {\r\n                var _b = _a[_i], key = _b[0], value = _b[1];\r\n                var id = value.display || key;\r\n                if (typeof value === 'object') {\r\n                    modelPatterns.push({\r\n                        id: id,\r\n                        path: path,\r\n                        type: value.type,\r\n                        desc: value.desc,\r\n                        realKey: key,\r\n                        context: value.context,\r\n                        suggestions: value.suggestions\r\n                    });\r\n                    if ('fields' in value) {\r\n                        path += '.' + id;\r\n                        makePattern(value.fields, path);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        makePattern();\r\n        return modelPatterns;\r\n    };\r\n    Urd.makePaths = function (text) {\r\n        var paths = ['__root__'];\r\n        var lines = text.split('\\n');\r\n        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\r\n            var line = lines_1[_i];\r\n            var match = this.matchBlock(line);\r\n            if (match.starting) {\r\n                paths.push(match.prop);\r\n            }\r\n            else if (match.ending) {\r\n                paths.pop();\r\n            }\r\n        }\r\n        return paths;\r\n    };\r\n    Urd.matchBlock = function (str) {\r\n        var res = { match: false };\r\n        if (str.match(/^(\\s*[^<]+)(:)(.+[^>])/i)) {\r\n            res = {\r\n                match: true,\r\n                prop: RegExp.$1.trim(),\r\n                propPosition: RegExp.$1.length - RegExp.$1.trim().length,\r\n                propValue: RegExp.$3,\r\n                inline: true\r\n            };\r\n        }\r\n        else if (str.match(/^(\\s*<)([^\\/:]+)(>)/i)) {\r\n            var prop = RegExp.$2;\r\n            if (prop.startsWith('!')) {\r\n                prop = prop.substr(1, prop.length - 1);\r\n                res.isEval = true;\r\n            }\r\n            res = tslib_1.__assign({}, res, { match: true, starting: true, prop: prop, propPosition: RegExp.$1.length });\r\n        }\r\n        else if (str.match(/^(\\s*<)([^\\/]+)(:)(.+)(>)/i)) {\r\n            var prop = RegExp.$2;\r\n            if (prop.startsWith('!')) {\r\n                prop = prop.substr(1, prop.length - 1);\r\n                res.isEval = true;\r\n            }\r\n            res = tslib_1.__assign({}, res, { match: true, starting: true, prop: prop, propPosition: RegExp.$1.length, parameter: RegExp.$4 });\r\n        }\r\n        else if (str.match(/^(\\s*<\\/)([^:]+)(>)/i)) {\r\n            res = {\r\n                match: true,\r\n                ending: true,\r\n                prop: RegExp.$2,\r\n                propPosition: RegExp.$1.length\r\n            };\r\n        }\r\n        return res;\r\n    };\r\n    return Urd;\r\n}());\r\nexport { Urd };\r\n","dts":{"name":"/media/cyriac/0CC5166B0CC5166B/Work/@urd/core/urd.d.ts","writeByteOrderMark":false,"text":"import { BlockMatch, Model, ModelPattern } from './model';\r\nexport declare class Urd {\r\n    static parse(input: string): {};\r\n    static makePatterns(model: Model): ModelPattern[];\r\n    static makePaths(text: string): string[];\r\n    static matchBlock(str: string): BlockMatch;\r\n}\r\n"}}
